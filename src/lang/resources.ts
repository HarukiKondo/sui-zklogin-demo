export const resources = {
  en: {
    translation: {
      '生成临时秘钥对': "Generate Ephemeral Key Pair",
      '获取JWT': "Fetch JWT",
      'Decode JWT': 'Decode JWT',
      '生成用户的 Salt': "Generate Salt",
      '获取用户的 Sui 地址': 'Generate user Sui address',
      '获取 ZK Proof': "Fetch ZK Proof",
      '组装 zkLogin 签名': "Assemble zkLogin signature",
      '来自 OpenID Provider': " From OpenID Provider",
      '后续组装zkLogin签名时需要用到': "Needed for assembling zkLogin signature later",
      '用户地址由 JWT 和 Salt 共同决定': "User address determined by JWT and Salt together",
      '交易签名需要 ZK Proof': "Transaction signing requires ZK Proof",
      '提交交易': "Submit Transaction",
      "第一步：生成临时秘钥对（ephemeralKeyPair）": "Step 1: Generate Ephemeral Key Pair",
      "step1-desc": "The ephemeral key pair is used to sign the <1>transactionBlock</1>",
      "储存在浏览器会话中": "Stored in the browser session.",
      "第二步：获取JWT": "Step 2: Fetch JWT",
      "所需参数：": "Required parameters:",
      "（申请 OpenID Service 服务获得）": "(Obtained by applying for OpenID Service.)",
      "（App Url, 在 OpenID Service 配置）": "(App Url, configured in OpenID Service)",
      "step2-NONCE": `(Generated through<1>ephemeralKeyPair</1> <2>maxEpoch</2> 
      <3>randomness</3>)`,
      "上一步生成的临时秘钥对": "Ephemeral key pair generated in the previous step",
      "临时秘钥对的有效期": "Validity period of the ephemeral key pair",
      "随机种子": "Randomness",
      "获取当前Epoch (通过Sui Client)": "Fetch current Epoch (via Sui Client)",
      "当前Epoch:": "Current Epoch:",
      "假设设置有效期为10个 Epoch，则：": "Assuming the validity period is set to 10 Epochs, then:",
      "生成随机种子": "Generate random seed",
      "第三步：Decode JWT (后续组装 zkLogin 签名时需要用到)": "Step 3: Decode JWT (needed for assembling zkLogin signature later)",
      "签发人": "Issuer",
      "使用者 (CLIENT_ID)": "JWT Consumer (CLIENT_ID)",
      "主体 （用户标识符，每个用户都不一样）": "Subject (user identifier, unique for each user)",
      "签名顺序（前面组装URL参数生成的值）": "Signature order (values generated by assembling URL parameters earlier)",
      "生效时间": "Issued At",
      "签发时间": "Issued Time",
      "过期时间": "Expiration Time",
      "JWT编号": "JWT ID",
      "第四步：生成用户的 Salt": "Step 4: Generate User's Salt",
      "用户 Salt 用于消除 OAuth 标识符 （sub） 与链上 Sui 地址的一一对应关系，以避免将 Web2 凭证与 Web3 凭证链接。": "User Salt is used to eliminate the one-to-one correspondence between the OAuth identifier (sub) and the on-chain Sui address, avoiding linking Web2 credentials with Web3 credentials.",
      "因此必须保管好 Salt，丢失后用户则无法找回当前 Salt 生成的地址。": "Therefore, it is essential to safeguard the Salt. If lost, users won't be able to recover the address generated with the current Salt.",
      "step4-keep-salt": `<1>Where to Save:</1><2>1. Ask the user to remember (send to user's email)</2><3>2. Store on the client side (browser)</3><3>3. Save in the APP Backend database, corresponding one-to-one with UID</3>`,
      "第五步：获取用户的 Sui 地址": "Step 5: Generate User's Sui Address",
      "step5-desc": `The user's Sui address is determined by <1>sub</1>,<1>iss</1>,<1>aud</1> and <1>user_salt</1> together. For the same JWT, <1>sub</1>, <1>iss</1>, and <1>aud</1> will not change with each login.`,
      "生成地址": "Generate Sui Address",
      "第六步：获取ZK Proof (Groth16)": "Step 6: Fetch ZK Proof (Groth16)",
      "这是对临时密钥对的证明（证明），用于证明临时密钥对有效。": "This is the proof (ZK Proof) for the ephemeral key pair, used to demonstrate the validity of the ephemeral key pair.",
      "1.首先，生成扩展的临时公钥，用作 ZKP 的输入。": "1. First, generate the extended ephemeral public key as input for the ZKP.",
      "生成扩展的临时公钥": "Generate the extended ephemeral public key",
      "step-6-desc": "Use the generated extended ephemeral public key (extendedEphemeralPublicKey) to generate ZK Proof. SUI provides a backend service (or you can run a Docker).",
      "获取ZK Proof": "Fetch ZK Proof",
      "第七步：组装 zkLogin 签名并提交交易": "Step 7: Assemble zkLogin signature and submit the transaction",
      "每个 ZK 证明都与一个临时密钥对相关联。储存在适当位置，可以重复作为证明用来签署任意数量的交易，直到临时密钥对过期": "Each ZK Proof is associated with an ephemeral key pair. Stored in the appropriate location, it can be reused as proof to sign any number of transactions until the ephemeral key pair expires.",
      "执行交易前，请给 zkLogin 充值少量的 SUI 作为发起交易的 gas fee": "Before executing the transaction, please recharge zkLogin with a small amount of SUI as the gas fee for initiating the transaction."
    },
  },
  zh: {
    translation: {
      '生成临时秘钥对': "生成临时秘钥对",
      '获取JWT': "获取JWT",
      'Decode JWT': 'Decode JWT',
      '生成用户的 Salt': "生成用户的 Salt",
      '获取用户的 Sui 地址': '获取用户的 Sui 地址',
      '获取 ZK Proof': "获取 ZK Proof",
      '组装 zkLogin 签名': "组装 zkLogin 签名",
      'ephemeralKeyPair': "ephemeralKeyPair",
      '来自 OpenID Provider': " 来自 OpenID Provider",
      '后续组装zkLogin签名时需要用到': "后续组装zkLogin签名时需要用到",
      '用户地址由 JWT 和 Salt 共同决定': "用户地址由 JWT 和 Salt 共同决定",
      '交易签名需要 ZK Proof': "交易签名需要 ZK Proof",
      '提交交易': "提交交易",
      "第一步：生成临时秘钥对（ephemeralKeyPair）": "第一步：生成临时秘钥对（ephemeralKeyPair）",
      "step1-desc": "临时秘钥对用来对<1>transactionBlock</1>进行签名",
      "储存在浏览器会话中": "储存在浏览器会话中",
      "第二步：获取JWT": "第二步：获取JWT",
      "所需参数：": "所需参数：",
      "（申请 OpenID Service 服务获得）": "（申请 OpenID Service 服务获得）",
      "（App Url, 在 OpenID Service 配置）": "（App Url，在 OpenID Service 配置）",
      "step2-NONCE": `（通过 <1>ephemeralKeyPair</1> <2>maxEpoch</2> 
      <3>randomness</3> 生成）`,
      "上一步生成的临时秘钥对": "上一步生成的临时秘钥对",
      "临时秘钥对的有效期": "临时秘钥对的有效期",
      "随机种子": "随机种子",
      "获取当前Epoch (通过Sui Client)": "获取当前Epoch (通过Sui Client)",
      "当前Epoch:": "当前Epoch:",
      "假设设置有效期为10个 Epoch，则：": "假设设置有效期为10个 Epoch，则：",
      "生成随机种子": "生成随机种子",
      "第三步：Decode JWT (后续组装 zkLogin 签名时需要用到)": "第三步：Decode JWT (后续组装 zkLogin 签名时需要用到)",
      "签发人": "签发人",
      "使用者 (CLIENT_ID)": "使用者 (CLIENT_ID)",
      "主体 （用户标识符，每个用户都不一样）": "主体 （用户标识符，每个用户都不一样）",
      "签名顺序（前面组装URL参数生成的值）": "签名顺序（前面组装URL参数生成的值）",
      "生效时间": "生效时间",
      "签发时间": "签发时间",
      "过期时间": "过期时间",
      "JWT编号": "JWT编号",
      "第四步：生成用户的 Salt": "第四步：生成用户的 Salt",
      "用户 Salt 用于消除 OAuth 标识符 （sub） 与链上 Sui 地址的一一对应关系，以避免将 Web2 凭证与 Web3 凭证链接。": "用户 Salt 用于消除 OAuth 标识符 （sub） 与链上 Sui 地址的一一对应关系，以避免将 Web2 凭证与 Web3 凭证链接。",
      "因此必须保管好 Salt，丢失后用户则无法找回当前 Salt 生成的地址。": "因此必须保管好 Salt，丢失后用户则无法找回当前 Salt 生成的地址。",
      "step4-keep-salt": `<1>保存在哪：</1>
      <1>1.要求用户记住(发送到用户邮箱)</1>
      <1>2.储存在客户端(浏览器)</1>
      <1>3.保存在APP Backend数据库，与UID一一对应</1>`,
      "第五步：获取用户的 Sui 地址": "第五步：获取用户的 Sui 地址",
      "step5-desc": `用户 Sui 地址由 <1>sub</1> 、 <1>iss</1> 、
      <1>aud</1> 和 <1>user_salt</1> 共同决定，对于同一个
      JWT，每次登陆时 <1>sub</1> 、 <1>iss</1> 、
      <1>aud</1> 都不会变。`,
      "生成地址": "生成 Sui 地址",
      "第六步：获取ZK Proof (Groth16)": "第六步：获取ZK Proof (Groth16)",
      "这是对临时密钥对的证明（证明），用于证明临时密钥对有效。": "这是对临时密钥对的证明（证明），用于证明临时密钥对有效。",
      "1.首先，生成扩展的临时公钥，用作 ZKP 的输入。": "1.首先，生成扩展的临时公钥，用作 ZKP 的输入。",
      "生成扩展的临时公钥": "生成扩展的临时公钥",
      "step-6-desc": "使用生成临时的公钥扩展(extendedEphemeralPublicKey)来生成ZK Proof，SUI 提供了一个 backend service（也可以 Run 一个 Docker）",
      "获取ZK Proof": "获取ZK Proof",
      "第七步：组装 zkLogin 签名并提交交易": "第七步：组装 zkLogin 签名并提交交易",
      "每个 ZK 证明都与一个临时密钥对相关联。储存在适当位置，可以重复作为证明用来签署任意数量的交易，直到临时密钥对过期": "每个 ZK 证明都与一个临时密钥对相关联。储存在适当位置，可以重复作为证明用来签署任意数量的交易，直到临时密钥对过期",
      "执行交易前，请给 zkLogin 充值少量的 SUI 作为发起交易的 gas fee": "执行交易前，请给 zkLogin 充值少量的 SUI 作为发起交易的 gas fee"
    },
  },
};